import antlrgenerated.ParserGeneratorLexer
import antlrgenerated.ParserGeneratorParser
import autogenerated.LexerAnalyzer
import generator.ParserGenerator
import generator.ParserGeneratorVisitorImpl
import org.antlr.v4.runtime.CharStreams
import org.antlr.v4.runtime.CommonTokenStream

fun main() {
    val stream = CharStreams.fromStream("""
+ autogenerated ;

start : VARIABLE EQ expression SEMI startEnd ;
startEnd : start ;
startEnd : EOF ;

expression : LB expression RB ;
expression : expression POW expression ;
expression : expression highPrior expression ;
expression : expression lowPrior expression ;
expression : term ;

highPrior : MULT ;
highPrior : DIV ;

lowPrior : PLUS ;
lowPrior : MINUS ;

term : NUMBER ;
term : VARIABLE ;

VARIABLE : /[a-zA-Z][a-zA-Z0-9]*/ ;
NUMBER : /[0-9]+/ ;
PLUS  : "+" ;
MINUS : "-" ;
MULT  : "*" ;
DIV   : "/" ;
POW   : "^" ;
SEMI  : ";" ;
EQ    : "=" ;
LB    : "(" ;
RB    : ")" ;
    """.trimIndent().byteInputStream())
    val parser = ParserGeneratorParser(CommonTokenStream(ParserGeneratorLexer(stream)))
    val tree = parser.start()
    val visitor = ParserGeneratorVisitorImpl()
    visitor.visitStart(tree)

    val parserGenerator = ParserGenerator().generate(visitor.data, "src/main/kotlin/autogenerated")
}