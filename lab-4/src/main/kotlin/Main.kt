import antlrgenerated.ParserGeneratorLexer
import antlrgenerated.ParserGeneratorParser
import autogenerated.LexerAnalyzer
import autogenerated.Node
import autogenerated.Parser
import generator.ParserGenerator
import generator.ParserGeneratorVisitorImpl
import io.github.rchowell.dotlin.DotRootGraph
import io.github.rchowell.dotlin.digraph
import org.antlr.v4.runtime.CharStreams
import org.antlr.v4.runtime.CommonTokenStream
import java.io.File

private val outPath = File("src/test/out").also { it.mkdirs() }

fun main() {
    val stream = CharStreams.fromStream(File("src/test/examples/test").inputStream())
    val parser = ParserGeneratorParser(CommonTokenStream(ParserGeneratorLexer(stream)))
    val tree = parser.start()
    val visitor = ParserGeneratorVisitorImpl()
    visitor.visitStart(tree)

    ParserGenerator().generate(visitor.data, "src/main/kotlin/autogenerated")

    val myParser = Parser(LexerAnalyzer("2 + 4 * 10 / 20".byteInputStream()))
    val myTree = myParser.parse()
    println(myTree.value)
    val graph = makeGraph(myTree)
    saveImage(graph, "test")
}

private fun makeGraph(tree: Node): DotRootGraph {
    val graph = digraph {
        addSubgraph(tree)
    }
    return graph
}

private fun DotRootGraph.addSubgraph(tree: Node) {
    tree.children.forEach {
        "\"${tree.id}\"" - "\"${it.id}\""
    }
    +subgraph {
        tree.children.forEach {
            +it.id.toString() + {
                label = it.nodeName
            }
        }
        tree.children.forEach {
            addSubgraph(it)
        }
    }
}

private fun saveImage(graph: DotRootGraph, name: String) {
    val tempFile = createTempFile(name, graph.dot())
    val process = ProcessBuilder(
        "dot",
        "-Tpng",
        "-o",
        outPath.resolve("$name.png").absolutePath,
        tempFile.absolutePath
    ).start()
    process.waitFor()
    cleanTempFile(name)
}

private fun createTempFile(name: String, content: String): File {
    val file = File(outPath, name)
    file.writeText(content)
    return file
}

private fun cleanTempFile(name: String) {
    val file = File(outPath, name)
    file.delete()
}