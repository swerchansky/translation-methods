+ calculator.autogenerated ;

attr @ val stack = ArrayDeque<Double>() @
node @ var value: Double = 0.0 @

start :
    fullGrammar @result.value = var0.value@
    ;

fullGrammar :
    term @result.value = var0.value@
    lowPriority @result.value = var1.value@
    ;

lowPriority :
    PLUS
    term @val second = stack.removeLast(); val first = stack.removeLast(); stack.addLast(first + second);@
    lowPriority @result.value = var1.value;@
    ;
lowPriority :
    MINUS
    term @val second = stack.removeLast(); val first = stack.removeLast(); stack.addLast(first - second);@
    lowPriority @result.value = var1.value;@
    ;
lowPriority :
    EPS @result.value = stack.last();@
    ;

term : value highPriority @result.value = var1.value;@ ;

highPriority :
    MULT
    value @val second = stack.removeLast(); val first = stack.removeLast(); stack.addLast(first * second);@
    highPriority @result.value = var1.value;@
    ;
highPriority :
    DIV
    value @val second = stack.removeLast(); val first = stack.removeLast(); stack.addLast(first / second);@
    highPriority @result.value = var1.value;@
    ;
highPriority :
    EPS @result.value = stack.last();@
    ;

value : NUMBER @result.value = text.toDouble(); stack.addLast(text.toDouble());@ ;
value : MINUS NUMBER @result.value = -text.toDouble(); stack.addLast(-text.toDouble());@ ;
value : LB start RB @result.value = var0.value;@ ;

PLUS  : "+" ;
MINUS : "-" ;
MULT  : "*" ;
DIV   : "/" ;
LB    : "(" ;
RB    : ")" ;
NUMBER : /[0-9]+/ ;
