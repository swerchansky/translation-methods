package lab2

import io.github.rchowell.dotlin.DotRootGraph
import io.github.rchowell.dotlin.digraph
import lab2.autogenerated.Lab2LexerAnalyzer
import lab2.autogenerated.Lab2Node
import lab2.autogenerated.Lab2Parser
import org.junit.jupiter.api.Test
import java.io.File

class Lab2ParserTest {
    private var parser: Lab2Parser = Lab2Parser(Lab2LexerAnalyzer("".byteInputStream()))
    private val outPath = File("src/test/kotlin/lab2/out").also { it.mkdirs() }

    @Test
    fun `simple test`() {
        setup("var name: Array<Int>")
        test("simple_test")
    }

    @Test
    fun `string type test`() {
        setup("var a: Array<String>")
        test("string_type_test")
    }

    @Test
    fun `tuple test 1`() {
        setup("var a: Tuple<String>")
        test("tuple_test_1")
    }

    @Test
    fun `tuple test 5`() {
        setup("var a: Tuple<String, Int, Float, Char, Long>")
        test("tuple_test_5")
    }

    private fun test(name: String) {
        val tree = parser.parse()
        val graph = makeGraph(tree)
        saveImage(graph, name)
    }

    private fun makeGraph(tree: Lab2Node): DotRootGraph {
        val graph = digraph {
            addSubgraph(tree)
        }
        println(graph.dot())
        return graph
    }

    private fun DotRootGraph.addSubgraph(tree: Lab2Node) {
        tree.children.forEach {
            "\"${tree.id}\"" - "\"${it.id}\""
        }
        +subgraph {
            tree.children.forEach {
                +it.id.toString() + {
                    label = it.nodeName
                }
            }
            tree.children.forEach {
                addSubgraph(it)
            }
        }
    }

    private fun saveImage(graph: DotRootGraph, name: String) {
        val tempFile = createTempFile(name, graph.dot())
        val process = ProcessBuilder(
            "dot",
            "-Tpng",
            "-o",
            outPath.resolve("$name.png").absolutePath,
            tempFile.absolutePath
        ).start()
        process.waitFor()
        cleanTempFile(name)
    }

    private fun createTempFile(name: String, content: String): File {
        val file = File(outPath, name)
        file.writeText(content)
        return file
    }

    private fun cleanTempFile(name: String) {
        val file = File(outPath, name)
        file.delete()
    }

    private fun setup(input: String) {
        parser = Lab2Parser(Lab2LexerAnalyzer(input.byteInputStream()))
    }
}