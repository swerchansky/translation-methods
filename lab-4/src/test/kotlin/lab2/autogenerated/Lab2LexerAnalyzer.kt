package lab2.autogenerated

import java.io.InputStream

class Lab2LexerAnalyzer(private val stream: InputStream, ) {
	var position: Int = 0
	var currentChar: Int = -1
	var token: Lab2Token = Lab2Token.EOF
	var tokenValue: String = ""
	var tokenText: StringBuilder = StringBuilder()
	
	init {
		nextChar()
		nextToken()
	}
	
	fun nextToken(): Unit {
		skipWhitespaces()
		var string = ""
		var last: Char
		while (!currentChar.toChar().isWhitespace()) {
			if (currentChar < 0) {
				string = tokenText.toString()
				tokenText.clear()
				token = Lab2Token.EOF
				tokenValue = "EOF"
				break
			}
	
			last = currentChar.toChar()
			string = tokenText.toString()
			tokenText.append(currentChar.toChar())
			if (tokenText.toString() == "EPS" || tokenText.toString() == "EOF" || tokenText.toString() == "Double" || tokenText.toString() == "String" || tokenText.toString() == "Boolean" || tokenText.toString() == "Float" || tokenText.toString() == "Array" || tokenText.toString() == "Tuple" || tokenText.toString() == "Short" || tokenText.toString() == "Long" || tokenText.toString() == "Char" || tokenText.toString() == "Byte" || tokenText.toString() == "Int" || tokenText.toString() == "Any" || tokenText.toString() == "var" || tokenText.toString() == ":" || tokenText.toString() == "<" || tokenText.toString() == ">" || tokenText.toString() == "," || tokenText.toString().matches("[a-zA-Z][a-zA-Z0-9]*".toRegex())) {
				nextChar()
				if (currentChar < 0 || currentChar.toChar().isWhitespace()) {
					string = tokenText.toString()
					tokenText.clear()
					break
				}
	
			} else {
				tokenText.clear()
				tokenText.append(last)
				nextChar()
				break
			}
	
	
		}
	
		if (string == "EPS") {
			token = Lab2Token.EPS
			tokenValue = string
			return
		}
	
		if (string == "EOF") {
			token = Lab2Token.EOF
			tokenValue = string
			return
		}
	
		if (string == "Double") {
			token = Lab2Token.DOUBLE
			tokenValue = string
			return
		}
	
		if (string == "String") {
			token = Lab2Token.STRING
			tokenValue = string
			return
		}
	
		if (string == "Boolean") {
			token = Lab2Token.BOOL
			tokenValue = string
			return
		}
	
		if (string == "Float") {
			token = Lab2Token.FLOAT
			tokenValue = string
			return
		}
	
		if (string == "Array") {
			token = Lab2Token.ARRAY
			tokenValue = string
			return
		}
	
		if (string == "Tuple") {
			token = Lab2Token.TUPLE
			tokenValue = string
			return
		}
	
		if (string == "Short") {
			token = Lab2Token.SHORT
			tokenValue = string
			return
		}
	
		if (string == "Long") {
			token = Lab2Token.LONG
			tokenValue = string
			return
		}
	
		if (string == "Char") {
			token = Lab2Token.CHAR
			tokenValue = string
			return
		}
	
		if (string == "Byte") {
			token = Lab2Token.BYTE
			tokenValue = string
			return
		}
	
		if (string == "Int") {
			token = Lab2Token.INT
			tokenValue = string
			return
		}
	
		if (string == "Any") {
			token = Lab2Token.ANY
			tokenValue = string
			return
		}
	
		if (string == "var") {
			token = Lab2Token.VAR
			tokenValue = string
			return
		}
	
		if (string == ":") {
			token = Lab2Token.SC
			tokenValue = string
			return
		}
	
		if (string == "<") {
			token = Lab2Token.LB
			tokenValue = string
			return
		}
	
		if (string == ">") {
			token = Lab2Token.RB
			tokenValue = string
			return
		}
	
		if (string == ",") {
			token = Lab2Token.CM
			tokenValue = string
			return
		}
	
		if (string.matches("[a-zA-Z][a-zA-Z0-9]*".toRegex())) {
			token = Lab2Token.VARIABLE
			tokenValue = string
			return
		}
	
	}
	
	private fun nextChar(): Unit {
		currentChar = stream.read()
		position++
	}
	
	private fun skipWhitespaces(): Unit {
		while (currentChar.toChar().isWhitespace()) {
			nextChar()
		}
	
	}
}