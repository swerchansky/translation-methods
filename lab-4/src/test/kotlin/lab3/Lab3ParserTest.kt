package lab3

import io.github.rchowell.dotlin.DotRootGraph
import io.github.rchowell.dotlin.digraph
import lab3.autogenerated.Lab3LexerAnalyzer
import lab3.autogenerated.Lab3Node
import lab3.autogenerated.Lab3Parser
import org.junit.jupiter.api.Test
import java.io.File

class Lab3ParserTest {
    private val outPath = File("src/test/kotlin/lab3/out").also { it.mkdirs() }
    private val inPath = File("src/test/kotlin/lab3/in").also { it.mkdirs() }
    private var parser: Lab3Parser = Lab3Parser(Lab3LexerAnalyzer("".byteInputStream()))
    private var visitor = Lab3NodeVisitor()

    @Test
    fun `simple test`() = test("simple")

    @Test
    fun `two variables test`() = test("two_variables")

    @Test
    fun `variables remember test`() = test("variables_remember")

    @Test
    fun `brackets test`() = test("brackets")

    @Test
    fun `example test`() = test("example")

    @Test
    fun `pow 1 test`() = test("pow1")

    @Test
    fun `pow 2 test`() = test("pow2")

    @Test
    fun `pow 3 test`() = test("pow3")

    private fun test(name: String) {
        val file = File(inPath, name)
        setup(file)
        val tree = parser.parse()
        val graph = makeGraph(tree)
        saveImage(graph, file.name)
        visitor.visit(tree)
        val outFile = File(outPath, name)
        outFile.writeText(visitor.output)
    }

    private fun makeGraph(tree: Lab3Node): DotRootGraph {
        val graph = digraph {
            addSubgraph(tree)
        }
        return graph
    }

    private fun DotRootGraph.addSubgraph(tree: Lab3Node) {
        tree.children.forEach {
            "\"${tree.id}\"" - "\"${it.id}\""
        }
        +subgraph {
            tree.children.forEach {
                +it.id.toString() + {
                    label = it.nodeName
                }
            }
            tree.children.forEach {
                addSubgraph(it)
            }
        }
    }

    private fun saveImage(graph: DotRootGraph, name: String) {
        val tempFile = createTempFile(name, graph.dot())
        val process = ProcessBuilder(
            "dot",
            "-Tpng",
            "-o",
            outPath.resolve("$name.png").absolutePath,
            tempFile.absolutePath
        ).start()
        process.waitFor()
        cleanTempFile(name)
    }

    private fun createTempFile(name: String, content: String): File {
        val file = File(outPath, name)
        file.writeText(content)
        return file
    }

    private fun cleanTempFile(name: String) {
        val file = File(outPath, name)
        file.delete()
    }

    private fun setup(input: File) {
        visitor = Lab3NodeVisitor()
        parser = Lab3Parser(Lab3LexerAnalyzer(input.inputStream()))
    }
}