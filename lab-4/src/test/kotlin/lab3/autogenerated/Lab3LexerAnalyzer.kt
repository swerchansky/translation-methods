package lab3.autogenerated

import java.io.InputStream

class Lab3LexerAnalyzer(private val stream: InputStream, ) {
	var position: Int = 0
	var currentChar: Int = -1
	var token: Lab3Token = Lab3Token.EOF
	var tokenValue: String = ""
	var tokenText: StringBuilder = StringBuilder()
	
	init {
		nextChar()
		nextToken()
	}
	
	fun nextToken(): Unit {
		skipWhitespaces()
		var string = ""
		var last: Char
		while (!currentChar.toChar().isWhitespace()) {
			if (currentChar < 0) {
				string = tokenText.toString()
				tokenText.clear()
				token = Lab3Token.EOF
				tokenValue = "EOF"
				break
			}
	
			last = currentChar.toChar()
			string = tokenText.toString()
			tokenText.append(currentChar.toChar())
			if (tokenText.toString() == "EPS" || tokenText.toString() == "EOF" || tokenText.toString() == "+" || tokenText.toString() == "-" || tokenText.toString() == "*" || tokenText.toString() == "/" || tokenText.toString() == "^" || tokenText.toString() == ";" || tokenText.toString() == "=" || tokenText.toString() == "(" || tokenText.toString() == ")" || tokenText.toString().matches("[0-9]+".toRegex()) || tokenText.toString().matches("[a-zA-Z][a-zA-Z0-9]*".toRegex())) {
				nextChar()
				if (currentChar < 0 || currentChar.toChar().isWhitespace()) {
					string = tokenText.toString()
					tokenText.clear()
					break
				}
	
			} else {
				tokenText.clear()
				tokenText.append(last)
				nextChar()
				break
			}
	
	
		}
	
		if (string == "EPS") {
			token = Lab3Token.EPS
			tokenValue = string
			return
		}
	
		if (string == "EOF") {
			token = Lab3Token.EOF
			tokenValue = string
			return
		}
	
		if (string == "+") {
			token = Lab3Token.PLUS
			tokenValue = string
			return
		}
	
		if (string == "-") {
			token = Lab3Token.MINUS
			tokenValue = string
			return
		}
	
		if (string == "*") {
			token = Lab3Token.MULT
			tokenValue = string
			return
		}
	
		if (string == "/") {
			token = Lab3Token.DIV
			tokenValue = string
			return
		}
	
		if (string == "^") {
			token = Lab3Token.POW
			tokenValue = string
			return
		}
	
		if (string == ";") {
			token = Lab3Token.SEMI
			tokenValue = string
			return
		}
	
		if (string == "=") {
			token = Lab3Token.EQ
			tokenValue = string
			return
		}
	
		if (string == "(") {
			token = Lab3Token.LB
			tokenValue = string
			return
		}
	
		if (string == ")") {
			token = Lab3Token.RB
			tokenValue = string
			return
		}
	
		if (string.matches("[0-9]+".toRegex())) {
			token = Lab3Token.NUMBER
			tokenValue = string
			return
		}
	
		if (string.matches("[a-zA-Z][a-zA-Z0-9]*".toRegex())) {
			token = Lab3Token.VARIABLE
			tokenValue = string
			return
		}
	
	}
	
	private fun nextChar(): Unit {
		currentChar = stream.read()
		position++
	}
	
	private fun skipWhitespaces(): Unit {
		while (currentChar.toChar().isWhitespace()) {
			nextChar()
		}
	
	}
}