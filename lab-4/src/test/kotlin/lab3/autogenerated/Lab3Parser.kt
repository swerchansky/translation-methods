package lab3.autogenerated



class Lab3Parser(private val lexer: Lab3LexerAnalyzer, ) {
	private var text: String = ""
	private var id = 0
	  get() = field++

	fun parse(): Lab3Node {
		return start()
	}
	
	private fun fullGrammar(): Lab3Node {
		val children = mutableListOf<Lab3Node>()
		val result = Lab3Node(id, "fullGrammar", children)
		when (lexer.token) {
			Lab3Token.VARIABLE -> {
				check(Lab3Token.VARIABLE, "VARIABLE")
				text = lexer.tokenValue
				children += Lab3Node(id, text)
				lexer.nextToken()
				check(Lab3Token.EQ, "EQ")
				text = lexer.tokenValue
				children += Lab3Node(id, text)
				lexer.nextToken()
				val var0 = term1()
				children += var0
				val var1 = lowPriority()
				children += var1
				check(Lab3Token.SEMI, "SEMI")
				text = lexer.tokenValue
				children += Lab3Node(id, text)
				lexer.nextToken()
				val var2 = fullGrammarEps()
				children += var2
				return result
			}
	
			else -> {
				throw IllegalStateException("Unexpected token: ${lexer.token}")
			}
	
		}
	
	}
	
	private fun highPriority(): Lab3Node {
		val children = mutableListOf<Lab3Node>()
		val result = Lab3Node(id, "highPriority", children)
		when (lexer.token) {
			Lab3Token.DIV -> {
				check(Lab3Token.DIV, "DIV")
				text = lexer.tokenValue
				children += Lab3Node(id, text)
				lexer.nextToken()
				val var0 = value()
				children += var0
				val var1 = highPriority()
				children += var1
				return result
			}
	
			Lab3Token.MULT -> {
				check(Lab3Token.MULT, "MULT")
				text = lexer.tokenValue
				children += Lab3Node(id, text)
				lexer.nextToken()
				val var0 = value()
				children += var0
				val var1 = highPriority()
				children += var1
				return result
			}
	
			Lab3Token.RB -> {
				children += Lab3Node(id, "EPS")
				return result
			}
	
			Lab3Token.SEMI -> {
				children += Lab3Node(id, "EPS")
				return result
			}
	
			Lab3Token.PLUS -> {
				children += Lab3Node(id, "EPS")
				return result
			}
	
			Lab3Token.MINUS -> {
				children += Lab3Node(id, "EPS")
				return result
			}
	
			else -> {
				throw IllegalStateException("Unexpected token: ${lexer.token}")
			}
	
		}
	
	}
	
	private fun term2(): Lab3Node {
		val children = mutableListOf<Lab3Node>()
		val result = Lab3Node(id, "term2", children)
		when (lexer.token) {
			Lab3Token.NUMBER -> {
				val var0 = value()
				children += var0
				val var1 = power()
				children += var1
				return result
			}
	
			Lab3Token.VARIABLE -> {
				val var0 = value()
				children += var0
				val var1 = power()
				children += var1
				return result
			}
	
			Lab3Token.LB -> {
				val var0 = value()
				children += var0
				val var1 = power()
				children += var1
				return result
			}
	
			else -> {
				throw IllegalStateException("Unexpected token: ${lexer.token}")
			}
	
		}
	
	}
	
	private fun term1(): Lab3Node {
		val children = mutableListOf<Lab3Node>()
		val result = Lab3Node(id, "term1", children)
		when (lexer.token) {
			Lab3Token.NUMBER -> {
				val var0 = term2()
				children += var0
				val var1 = highPriority()
				children += var1
				return result
			}
	
			Lab3Token.VARIABLE -> {
				val var0 = term2()
				children += var0
				val var1 = highPriority()
				children += var1
				return result
			}
	
			Lab3Token.LB -> {
				val var0 = term2()
				children += var0
				val var1 = highPriority()
				children += var1
				return result
			}
	
			else -> {
				throw IllegalStateException("Unexpected token: ${lexer.token}")
			}
	
		}
	
	}
	
	private fun start(): Lab3Node {
		val children = mutableListOf<Lab3Node>()
		val result = Lab3Node(id, "start", children)
		when (lexer.token) {
			Lab3Token.VARIABLE -> {
				val var0 = fullGrammar()
				children += var0
				return result
			}
	
			else -> {
				throw IllegalStateException("Unexpected token: ${lexer.token}")
			}
	
		}
	
	}
	
	private fun fullGrammarEps(): Lab3Node {
		val children = mutableListOf<Lab3Node>()
		val result = Lab3Node(id, "fullGrammarEps", children)
		when (lexer.token) {
			Lab3Token.VARIABLE -> {
				val var0 = fullGrammar()
				children += var0
				return result
			}
	
			Lab3Token.EOF -> {
				children += Lab3Node(id, "EOF")
				return result
			}
	
			else -> {
				throw IllegalStateException("Unexpected token: ${lexer.token}")
			}
	
		}
	
	}
	
	private fun power(): Lab3Node {
		val children = mutableListOf<Lab3Node>()
		val result = Lab3Node(id, "power", children)
		when (lexer.token) {
			Lab3Token.POW -> {
				check(Lab3Token.POW, "POW")
				text = lexer.tokenValue
				children += Lab3Node(id, text)
				lexer.nextToken()
				val var0 = value()
				children += var0
				val var1 = power()
				children += var1
				return result
			}
	
			Lab3Token.DIV -> {
				children += Lab3Node(id, "EPS")
				return result
			}
	
			Lab3Token.RB -> {
				children += Lab3Node(id, "EPS")
				return result
			}
	
			Lab3Token.MULT -> {
				children += Lab3Node(id, "EPS")
				return result
			}
	
			Lab3Token.SEMI -> {
				children += Lab3Node(id, "EPS")
				return result
			}
	
			Lab3Token.PLUS -> {
				children += Lab3Node(id, "EPS")
				return result
			}
	
			Lab3Token.MINUS -> {
				children += Lab3Node(id, "EPS")
				return result
			}
	
			else -> {
				throw IllegalStateException("Unexpected token: ${lexer.token}")
			}
	
		}
	
	}
	
	private fun lowPriority(): Lab3Node {
		val children = mutableListOf<Lab3Node>()
		val result = Lab3Node(id, "lowPriority", children)
		when (lexer.token) {
			Lab3Token.RB -> {
				children += Lab3Node(id, "EPS")
				return result
			}
	
			Lab3Token.SEMI -> {
				children += Lab3Node(id, "EPS")
				return result
			}
	
			Lab3Token.PLUS -> {
				check(Lab3Token.PLUS, "PLUS")
				text = lexer.tokenValue
				children += Lab3Node(id, text)
				lexer.nextToken()
				val var0 = term1()
				children += var0
				val var1 = lowPriority()
				children += var1
				return result
			}
	
			Lab3Token.MINUS -> {
				check(Lab3Token.MINUS, "MINUS")
				text = lexer.tokenValue
				children += Lab3Node(id, text)
				lexer.nextToken()
				val var0 = term1()
				children += var0
				val var1 = lowPriority()
				children += var1
				return result
			}
	
			else -> {
				throw IllegalStateException("Unexpected token: ${lexer.token}")
			}
	
		}
	
	}
	
	private fun value(): Lab3Node {
		val children = mutableListOf<Lab3Node>()
		val result = Lab3Node(id, "value", children)
		when (lexer.token) {
			Lab3Token.NUMBER -> {
				check(Lab3Token.NUMBER, "NUMBER")
				text = lexer.tokenValue
				children += Lab3Node(id, text)
				lexer.nextToken()
				return result
			}
	
			Lab3Token.VARIABLE -> {
				check(Lab3Token.VARIABLE, "VARIABLE")
				text = lexer.tokenValue
				children += Lab3Node(id, text)
				lexer.nextToken()
				return result
			}
	
			Lab3Token.LB -> {
				check(Lab3Token.LB, "LB")
				text = lexer.tokenValue
				children += Lab3Node(id, text)
				lexer.nextToken()
				val var0 = term1()
				children += var0
				val var1 = lowPriority()
				children += var1
				check(Lab3Token.RB, "RB")
				text = lexer.tokenValue
				children += Lab3Node(id, text)
				lexer.nextToken()
				return result
			}
	
			else -> {
				throw IllegalStateException("Unexpected token: ${lexer.token}")
			}
	
		}
	
	}
	
	private fun check(token: Lab3Token, rule: String): Unit {
		if (lexer.token != token) {
			throw IllegalStateException("Expected $rule, but found ${lexer.token}")
		}
	
	}
}